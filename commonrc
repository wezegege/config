#!/usr/bin/sh
#
# ~/.commonrc
#

#====================================================================
# environment
#====================================================================

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/.local/bin" ] ; then
    PATH="${HOME}/.local/bin:${PATH}"
fi
PATH="${HOME}/config/scripts:${PATH}"
if [ -d "${HOME}/.local/lib/python" ] ; then
    PYTHONPATH="${HOME}/.local/lib/python:${PYTHONPATH}"
fi

# Set default editor
if [[ -x $(which vim) ]]
then
  export EDITOR="vim"
  export USE_EDITOR=${EDITOR}
  export VISUAL=${EDITOR}
fi

PROJECTPATH="${HOME}/.local/lib/python:${HOME}/.local/lib"
PROJECTPATH="${PROJECTPATH}:${HOME}/workspace/*:${HOME}/workspace"
PROJECTPATH="${PROJECTPATH}:/usr/local/lib:/usr/local/share"
PROJECTPATH="${PROJECTPATH}:/usr/lib/python*/site-packages:/usr/lib/python*:/usr/local:/usr/share:/usr/lib"
PROJECTPATH="${PROJECTPATH}:/lib:/var/*:/etc:/srv"


export LC_ALL="fr_FR.UTF-8"

#====================================================================
# functions
#====================================================================

# up 3 -> ../../../
function up {
  count=1
  [ -z $1 ] || count=$1
  dir=""
  for i in `seq ${count}`; do
    dir="${dir}../"
  done
  echo ${dir}
}

export -f up >/dev/null

function .. {
  result=$(up $@)
  cd ${result}
}

export -f .. >/dev/null

# goes to root of a svn or git project, or root of a project given its
# folder, or to home
function proot {
  dest=""

  # svn project ?
  hash svn 2>/dev/null && root=$(svn info 2>/dev/null | sed -n 2p | cut -d':' -f 2 | tr -d ' ') && [[ -e ${root} ]] && dest=${root}

  # git project ?
  [[ ${dest} == "" ]] && hash git 2>/dev/null && root="$(git rev-parse --show-cdup 2>/dev/null)." && dest=${root}

  # particular root folder
  filemark="debian:.pc:.bzr:.hg:Makefile:setup.py:README"
  filemark="${filemark}:manage.py:requirements.txt"
  current=$(pwd)
  parent=$(dirname ${current})
  while [[ ${current} != $(dirname ${current}) || ${current} == ${HOME} ]]; do
    for folder in $(echo ${filemark} | tr ':' '\n'); do
      if [[ -e ${current}/${folder} ]]; then
        dest=${current}
        break
      fi
      current=$(dirname ${current})
    done
  done

  # particular tree folder
  recursefile="CVS:.svn"
  for folder in $(echo ${recursefile} | tr ':' '\n'); do
    parent="."
    while [[ -e "${parent}/${folder}" ]]; do
      dest=${parent}
      parent="${parent}/.."
    done
    [[ ${dest} != "" ]] && break
  done

  # common parent folder
  if [[ ${dest} == "" ]]; then
    # projectpath
    projectpath=${CDPATH}

    current_dir=$(pwd)
    for folder in $(echo ${projectpath} | tr ":" "\n"); do
      if eval "[[ ${current_dir} == ${folder}/* ]]"; then
        folder=${folder/\*/[^\/]*}
        dest=$(echo ${current_dir} | sed -e "s#${folder}/\([^/]\+\).*#${folder}/\1#")
        dest=$(eval "echo $dest")
        break
      fi
    done
  fi

  [[ ${dest} == "" ]] && dest=${HOME}

  if hash realpath 2>/dev/null ; then
    echo $(realpath ${dest})
  else
    echo ${dest}
  fi
}

export -f proot >/dev/null

function install {
   hash apt-get 2>/dev/null
   [ $? -eq 0 ] && sudo apt-get install $@
   hash pacman-color 2>/dev/null
   [ $? -eq 0 ] && sudo pacman-color -S $@
}

function update {
   hash apt-get 2>/dev/null
   [ $? -eq 0 ] && sudo apt-get update && sudo apt-get upgrade $@ && sudo apt-get clean
   hash pacman-color 2>/dev/null
   [ $? -eq 0 ] && sudo pacman-color -Syu $@
}

function remove {
   hash apt-get 2>/dev/null
   [ $? -eq 0 ] && sudo apt-get autoremove --purge $@
   hash pacman-color 2>/dev/null
   [ $? -eq 0 ] && sudo pacman-color -Rsn $(pacman-color -Qqdt) $@
}

function extract {     # Handy Extract Program.
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xvjf $1 ;;
      *.tar.gz) tar xvzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) unrar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xvf $1 ;;
      *.tbz2) tar xvjf $1 ;;
      *.tgz) tar xvzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *.deb)
        TMP=${1/.deb/}
        mkdir -p ${TMP}/debian
        dpkg -e $1 ${TMP}/debian
        dpkg -x $1 ${TMP}
      ;;
      *) echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
#====================================================================
# aliases
#====================================================================

# ls

alias ls="ls --color=auto"
alias ll="ls -A --group-directories-first"
alias lq="ls -ohF --group-directories-first"
alias la="ll -ohF"
alias lt="ls -lrth"
alias lg="lt -A"

# grep

GREP_ARGS="-In --color=auto --exclude-dir=.svn --exclude-dir=.git"
alias grep="grep ${GREP_ARGS}"
alias egrep="egrep ${GREP_ARGS}"
alias fgrep="fgrep ${GREP_ARGS}"
alias zgrep="fgrep ${GREP_ARGS}"
alias grec="grep ${GREP_ARGS} --color=always"
alias egrec="grep ${GREP_ARGS} --color=always"
alias fgrec="grep ${GREP_ARGS} --color=always"
alias zgrec="grep ${GREP_ARGS} --color=always"

# common commands

alias less="less -R"
alias mkdir="mkdir -p"
alias ps="ps aux"
alias du="du -h"
alias duu="du -skh *"
alias df="df -h"

# archive

alias dotar="tar pczf"
alias untar="tar xvf"
alias seetar="tar ztvf"

# functions

alias upgrade="update"
alias cdd='cd $(proot)'

# applications

alias sudo="sudo -E "
alias diff="diff -ur"
alias tailf="tail -f"
alias lns="ln -s"
alias tree="tree -C -I '*.pyc|__pycache__'"

alias gitrmall="git st -s | \egrep '^.D' | awk '{ print \$NF }' | xargs git rm"
alias svnrmall="svn st -s | \egrep '^!' | awk '{ print \$NF }' | xargs svn rm"

alias sqlite="sqlite3"
alias fmake="make -j 4"
alias scp="scp -pr"
alias vi="vim"
alias perl="perl -w"
alias shutdown="shutdown -h"
alias sqlite="sqlite3"

alias fmake="make -j 4"
alias gmake="make -f ${HOME}/config/data/Makefile"
alias gfab="fab -f ~/config/scripts/fabfile/__init__.py"

#====================================================================
# specificities
#====================================================================
if [[ -f /usr/local/bin/virtualenvwrapper.sh ]]; then
   source /usr/local/bin/virtualenvwrapper.sh
fi
if [[ -f /usr/bin/virtualenvwrapper.sh ]]; then
   source /usr/bin/virtualenvwrapper.sh
fi

if [ -f ~/.uncommonrc ]; then
   source ~/.uncommonrc   # --> Read /etc/bashrc, if present.
fi
